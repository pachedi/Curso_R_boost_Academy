select(full_text)
primeros_twits <- twits$text[1:5]
primeros_twits
primeros_twits <- twits$full_text[1:5]
primeros_twits
str_split(primeros_twits, pattern= " ")
separacion <- str_split(primeros_twits, pattern= " ")
separacion[[3]]
separacion[[3]][11]
primeros_twits
str_replace(primeros_twits, pattern="#",
replacement = "")
str_replace(primeros_twits, pattern="@",
replacement = "")
str_replace(primeros_twits, pattern="(@|#)",
replacement = "")
str_detect(primeros_twits, pattern="scaloneta")
str_detect(primeros_twits, pattern="Scaloneta")
messi <- twits %>%
filter(str_detect(full_text, pattern= "Messi"))
View(messi)
messi <- twits %>%
filter(str_detect(full_text, pattern= "(M|m)essi"))
messi <- twits %>%
filter(str_detect(full_text, pattern= "M|messi"))
View(messi)
messi <- twits %>%
filter(str_detect(full_text, pattern= "[Mm]essi"))
str_detect(primeros_twits, pattern="Scaloneta|scaloneta|SCALONETA")
messi <- twits %>%
filter(str_detect(full_text, pattern= "Messi|messi"))
base <- read.delim("transcripcion_debate.txt",
header= FALSE)
View(base)
base2 <- base %>%
mutate(oradores = NA)
View(base2)
base2 <- base2 %>%
rename(texto = 1)
colnames(base2)
nombres <- base2 %>%
filter(str_count(texto, "\\w+") <=2 )
View(nombres)
nombres <- unique(nombres$texto)
nombres
str_count(base2$texto[1], "\\w+")
str_count(base2$texto[11], "\\w+")
base2 <- base2 %>%
mutate(text= str_trim(text, side= "both"))
base2 <- base2 %>%
mutate(text= str_trim(texto, side= "both"))
base2 <- base2 %>%
mutate(texto= str_trim(texto, side= "both"))
base2 <- base2 %>%
select(-3)
base2 <- base2 %>%
mutate(texto = str_replace_all(texto, "Myriam Bregman:", "Bregman:"),
texto = str_replace_all(texto, "Juan Schiaretti:", "Schiaretti:"),
texto = str_replace_all(texto, "Javier Milei:", "Milei:"),
texto = str_replace_all(texto, "Patricia Bullrich:", "Bullrich:"),
texto = str_replace_all(texto, "Sergio Massa:", "Massa:"),
texto = str_replace_all(texto, "Moderador:", "Moderadores:"))
View(base2)
base2 <- base2 %>%
mutate(oradores = case_when(texto == "Bregman:"~ "Bregman",
texto == "Schiaretti:" ~"Schiaretti",
texto == "Milei:" ~ "Milei",
texto == "Bullrich:" ~ "Bullrich",
texto == "Massa:" ~ "Massa",
texto == "Moderadores:" ~ "Moderadores")
)
base3 <- base2 %>%
fill(oradores, .direction= "down")
View(base3)
milei <- base3 %>%
filter(oradores == "Milei")
View(milei)
milei <- milei %>%
select(-2)
milei <- milei %>%
mutate(texto = str_replace_all(texto, "Milei:", ""))
milei <- milei %>%
mutate(texto = str_to_lower(texto))
stop_words <- read.delim('https://raw.githubusercontent.com/pachedi/INTRO_R_CS/main/stop_words.csv')
View(stop_words)
View(stop_words)
View(milei)
unigram <- milei %>%
unnest_tokens(input= texto, output= word) %>%
na.omit() %>%
anti_join(stop_words)
View(unigram)
unigram <- unigram %>%
count(word, sort = TRUE)
View(unigram)
wordcloud2(unigram)
milei <- milei  %>%
mutate(texto = str_replace_all(texto, "[[:digit:]]", ''))
unigram <- milei %>%
unnest_tokens(input= texto, output= word) %>%
na.omit() %>%
anti_join(stop_words)
unigram <- unigram %>%
count(word, sort = TRUE)
wordcloud2(unigram)
milei <- base3 %>%
filter(oradores == "Schiaretti")
milei <- milei %>%
select(-2)
milei <- milei %>%
mutate(texto = str_replace_all(texto, "Schiaretti:", ""))
milei <- milei %>%
mutate(texto = str_to_lower(texto))
milei <- milei  %>%
mutate(texto = str_replace_all(texto, "[[:digit:]]", ''))
stop_words <- read.delim('https://raw.githubusercontent.com/pachedi/INTRO_R_CS/main/stop_words.csv')
unigram <- milei %>%
unnest_tokens(input= texto, output= word) %>%
na.omit() %>%
anti_join(stop_words)
unigram <- unigram %>%
count(word, sort = TRUE)
wordcloud2(unigram)
wordcloud2(unigram)
View(milei)
View(stop_words)
View(unigram)
wordcloud2(unigram)
library(stringr)
library(tidyverse)
library(RVerbalExpressions)
library(wordcloud2)
library(tidytext)
library(webshot)
library("htmlwidgets")
base <- read.delim("transcripcion_debate.txt",
header= FALSE)
base2 <- base %>%
mutate(oradores = NA)
base2 <- base2 %>%
rename(texto = 1)
colnames(base2)
nombres <- base2 %>%
filter(str_count(texto, "\\w+") <=2 )
str_count(base2$texto[11], "\\w+")
nombres <- unique(nombres$texto)
nombres
base2 <- base2 %>%
mutate(texto= str_trim(texto, side= "both"))
base2 <- base2 %>%
select(-3)
base2 <- base2 %>%
mutate(oradores = case_when(texto == "Bregman:"~ "Bregman",
texto == "Schiaretti:" ~"Schiaretti",
texto == "Milei:" ~ "Milei",
texto == "Bullrich:" ~ "Bullrich",
texto == "Massa:" ~ "Massa",
texto == "Moderadores:" ~ "Moderadores")
)
base3 <- base2 %>%
fill(oradores, .direction= "down")
milei <- base3 %>%
filter(oradores == "Schiaretti")
milei <- milei %>%
select(-2)
milei <- milei %>%
mutate(texto = str_replace_all(texto, "Schiaretti:", ""))
milei <- milei %>%
mutate(texto = str_to_lower(texto))
milei <- milei  %>%
mutate(texto = str_replace_all(texto, "[[:digit:]]", ''))
stop_words <- read.delim('https://raw.githubusercontent.com/pachedi/INTRO_R_CS/main/stop_words.csv')
unigram <- milei %>%
unnest_tokens(input= texto, output= word) %>%
na.omit() %>%
anti_join(stop_words)
unigram <- unigram %>%
count(word, sort = TRUE)
wordcloud2(unigram, main="titulo")
layout(matrix(c(1, 2), nrow=2), heights=c(1, 4))
par(mar=rep(0, 4))
plot.new()
text(x=0.5, y=0.5, "Title of my first plot")
layout(matrix(c(1, 2), nrow=2), heights=c(1, 4))
par(mar=rep(0, 4))
plot.new()
text(x=0.5, y=0.5, "Title of my first plot")
wordcloud(unigram, main="Title")
wordcloud(unigram)
wordcloud2(unigram)
title(main= "titulo")
wordcloud2(unigram)
title(main= "titulo")
wordcloud2(data = unigram, size=.5, color='random-dark') %>%
htmlwidgets::prependContent(htmltools::tags$h1("Title"))
htmlwidgets::prependContent(htmltools::tags$h1("Title"),(x=0.5, y=0.5)
wordcloud2(data = unigram, size=.5, color='random-dark') %>%
htmlwidgets::prependContent(htmltools::tags$h1("Title"),(x=0.5, y=0.5))
wordcloud2(unigram)
wordcloud2(unigram)
wordcloud2(unigram)
View(milei)
View(unigram)
wordcloud2(unigram)
function(x) x + 1
(function(x) x + 1)
(function(x) x + 1) (1)
df <- data.frame(
col1 = c("element1", "element2"),
col2 = c("element1", "element2"),
stringsAsFactors = FALSE
)
df
library (tmaptools)
library (RUMBA)
library (tidyverse)
library (sf)
library (ggmap)
library(osmdata)
library(leaflet)
library(geojsonio)
library(ggspatial)
library(rgdal)
baseurl <- "WfS:https://geo.arba.gov.ar/geoserver/idera/wfs?getcapabilities"
capa_wfs <- "idera:partidos"
partidos <- st_read(paste0(baseurl,capa_wfs))
View(partidos)
ggplot()+
geom_sf(data = partidos)
capa_wfs <- "urbasig:uso_del_suelo"
uso_suelo <- st_read(paste0(baseurl,capa_wfs))
View(uso_suelo)
baseurl <- "WFS:http://www.urbasig.gob.gba.gob.ar/geoserver/urbasig/wfs?request=GetFeature&service=WFS&typeName="
capa_wfs <- "urbasig:uso_del_suelo"
uso_suelo <- st_read(paste0(baseurl,capa_wfs))
ungs <- st_layers("WFS:http://ideconurbano.ungs.edu.ar/geoserver/wfs?getcapabilities")
ungs$name
nueve <- quilmes %>%
filter(Barrio == "Los Pinos")
bpop <- st_read("renabapgeo.geojson")
setwd("C:/Users/dpach/OneDrive - sociales.UBA.ar/Facultad/Maneiro - Explorando la periferia/Elecciones_2023")
bpop <- st_read("renabapgeo.geojson")
bpop <- bpop %>%
rename(depto = 4)
bpop_gba = bpop %>%
filter(depto %in% gba_veinticuatro & Provincia == "Buenos Aires")
gba_veinticuatro<- c("Almirante Brown", "Avellaneda", "Berazategui",  "Esteban Echeverría",
"Ezeiza", "Florencio Varela", "General San Martín", "Hurlingham", "Ituzaingó",
"José C. Paz", "La Matanza", "Lanús",
"Lomas de Zamora", "Malvinas Argentinas",  "Merlo",
"Moreno", "Morón",  "Quilmes",
"San Fernando", "San Isidro", "San Miguel",  "Tigre",
"Tres de Febrero","Vicente López")
bpop_gba = bpop %>%
filter(depto %in% gba_veinticuatro & Provincia == "Buenos Aires")
quilmes <- bpop_gba %>%
filter(depto == "Quilmes")
nueve <- quilmes %>%
filter(Barrio == "Los Pinos")
leaflet() %>%
addTiles() %>% addProviderTiles('Esri.WorldImagery')   %>%
addPolygons(data=nueve)
nueve <- quilmes %>%
filter(Barrio == "Los Pinos" | Barrio =="Nueve de Agosto")
ggplot(data= nueve) +
geom_sf()
leaflet() %>%
addTiles() %>% addProviderTiles('Esri.WorldImagery')   %>%
addPolygons(data=nueve)
View(quilmes)
nueve <- quilmes %>%
filter(Barrio == "Sayonara II" | Barrio =="Nueve de Agosto")
ggplot(data= nueve) +
geom_sf()
nueve <- quilmes %>%
filter(Barrio == "Sayonara I" | Barrio =="Nueve de Agosto")
leaflet() %>%
addTiles() %>% addProviderTiles('Esri.WorldImagery')   %>%
addPolygons(data=nueve)
nueve <- quilmes %>%
filter(Barrio == "Sayonara I")
leaflet() %>%
addTiles() %>% addProviderTiles('Esri.WorldImagery')   %>%
addPolygons(data=nueve)
library(tidyverse)
a <- "Diego"
print("Mi nombre es: ", a)
paste("Mi nombre es: ", a)
paste("Mi nombre es:", a)
nombre <- readline("¿Cómo te llamás?")
print(paste("hola", nombre, ":)"))
source("~/.active-rstudio-document")
grupo_a <- 10
grupo_b <- 5
aforo <- 20
grupo_a <- 10
grupo_b <- 5
aforo <- 20
if(grupo_a + grupo_b < aforo){
print("Pueden pasar")
}
grupo_a <- 10
grupo_b <- 10
aforo <- 20
if(grupo_a + grupo_b < aforo){
print("Pueden pasar")
} else if(grupo_a + grupo_b == aforo){
print("Aforo completo, no entra nadie más")
}
aforo <- 10
grupo_a + grupo_b < aforo
grupo_a + grupo_b == aforo
if(grupo_a + grupo_b < aforo){
print("Pueden pasar")
} else if(grupo_a + grupo_b == aforo){
print("Aforo completo, no entra nadie más")
} else{
print("Aforo excedido")
}
print("Aforo excedido") }
print("Aforo excedido") }
if(grupo_a + grupo_b < aforo){
print("Pueden pasar")
} else if(grupo_a + grupo_b == aforo){
print("Aforo completo, no entra nadie más")
} else{
print("Aforo excedido")
}
if(grupo_a + grupo_b < aforo){
print("Pueden pasar")
} else if(grupo_a + grupo_b == aforo){
print("Aforo completo, no entra nadie más")
} else{
print("Aforo excedido")
}
if(grupo_a + grupo_b < aforo){
print("Pueden pasar")
} else if(grupo_a + grupo_b == aforo){
print("Aforo completo, no entra nadie más")
} else{
print("Aforo excedido") }
if(grupo_a + grupo_b < aforo){
print("Pueden pasar")
} else if(grupo_a + grupo_b == aforo){
print("Aforo completo, no entra nadie más")
} else{
print("Aforo excedido") }
print("Aforo excedido") }
if(grupo_a + grupo_b < aforo){
print("Pueden pasar")
} else if(grupo_a + grupo_b == aforo){
print("Aforo completo, no entra nadie más")
} else{
print("Aforo excedido")
}
if(grupo_a + grupo_b < aforo){
print("Pueden pasar")
} else if(grupo_a + grupo_b == aforo){
print("Aforo completo, no entra nadie más")
} else{
print("Aforo excedido")
}
nombres <- c("Carlos", "Maria", "Marta", "Jose", "Mario")
print(nombres[1])
print(nombres[1])
print(nombres[2])
print(nombres[3])
print(nombres[4])
print(nombres[5])
1:5
for(i in 1:5){
print(nombres[i])
}
for(i in 1:5){
for(i in 1:5){
print(nombres[i])
}
}
for(nombre in 1:5){
print(nombres[nombre])
}
for(hola in 1:5){
print(nombres[hola])
}
nombres <- c("Carlos", "Maria", "Marta", "Jose")
for(i in 1:5){
print(nombres[i])
}
1:5
print(nombres[5])
length(nombres)
1:length(nombres)
for(i in 1:length(nombres)){
print(nombres[i])
}
nombres <- c("Carlos", "Maria", "Marta", "Jose","Diego")
for(i in 1:length(nombres)){
print(nombres[i])
}
nombres <- c("Carlos", "Maria", "Marta", "Jose","Diego")
for(i in 1:length(nombres)){
print(paste(nombres[i] , "está en la lista de invitados"))
}
edad <- c(20, 5, 30, 12, 45)
n_e <- data.frame(nombes,edad)
n_e <- data.frame(nombres,edad)
n_e
for(i in 1:length(nombres)){
print(paste(nombres[i] , "está en la lista de invitados"))
}
n_e
1:nrow(n_e)
n_e$edad[1]
n_e$edad[2]
n_e$edad[3]
for(i in 1:nrow(n_e)){
if(n_e$edad[i] >= 18){
print(paste("El invitado puede entrar"))
}
}
#n_e$edad[3]
n_e
for(i in 1:nrow(n_e)){
if(n_e$edad[i] >= 18){
print(paste("El invitado", n_e$nombres[i], "puede entrar"))
}
}
for(i in 1:nrow(n_e)){
if(n_e$edad[i] >= 18){
print(paste("El invitado", n_e$nombres[i], "puede entrar"))
} else {
print(paste("El invitado", n_e$nombres[i], "no puede entrar"))
}
}
ingresan <- c()
ingresan <- c()
for(i in 1:nrow(n_e)){
if(n_e$edad[i] >= 18){
print(paste("El invitado", n_e$nombres[i], "puede entrar"))
ingresan <- append(ingresan, n_e$nombres[i])
} else {
print(paste("El invitado", n_e$nombres[i], "no puede entrar"))
}
}
ingresan
numero <- 0
numero < 100
while(numero < 100){
numero <- numero + 1
print(numero)
}
numero <- 0
while(numero < 50){
numero <- numero + 1
if(numero == 20){
next
}
print(numero)
}
numero <- 0
while(numero < 50){
numero <- numero + 1
if(numero == 20){
next
}  else if(numero == 48){
break
}
print(numero)
}
numero <- 0
while(numero < 50){
numero <- numero + 1
if(numero %in% c(20:25)){
next
}  else if(numero == 48){
break
}
print(numero)
}
4+5
suma <- function(num1, num2){
resultado <- num1 + num2
return(resultado)
}
suma(10, 5)
suma("a", 5)
library(assertthat)
library(assertthat)
suma <- function(num1, num2){
assert_that(is.numeric(num1) & is.numeric(num2),
msg= "Ingrese un valor numérico")
#assert_that(is.numeric(num2),
#            msg= "Ingrese un valor numérico")
resultado <- num1 + num2
return(resultado)
}
suma("a", 5)
suma(4, "q")
suma(4, 100)
cada_100_mil <- function(ciudad, poblacion, contagios){
poblacion <- as.numeric(poblacion)
contagios <- as.numeric(contagios)
resultado <- contagios / poblacion * 100000
print(paste(ciudad, "tiene" , resultado, "contagios cada 100 mil habitantes"))
}
cada_100_mil("Buenos Aires", 20000000, 123000)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("contagios_funcion.R")
View(cada_100_mil)
source("~/.active-rstudio-document")
